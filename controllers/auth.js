const User  =  require('../models/user');
const Order  = require('../models/order');

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const nodemailer = require('nodemailer');

const { validationResult} =  require('express-validator');

const { manualPaymentLogger }  = require('../logger');


function sendMailForPaymentSuccess(data){
    var transport = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        auth: {
          user: process.env.EMAIL_USER, //generated by Mailtrap
          pass: process.env.EMAIL_PASSWORD //generated by Mailtrap
        }
      });

      var mailOptions = {
        from: process.env.EMAIL_SENDER,
       /*  to: 'user1@example.com, user2@example.com', */
       to:data.email,
        subject: 'Order and payment is Confirmed',
        text: 'Please ping whatsapp for payment info. our whatsapp number +91 1234567890) ',
        html: `
        <b>Hey ${data.fullName} 
        </b><br> This is your confirmed order details
        <br> Order Id : ${data._id}
        <br>Theatre Name : ${data.theatreName}
        <br>Date : ${data.screenDate}
        <br>PaymentStatus: ${data.paymentStatus}
        <br>Slot Name : ${data.slotName}
        <br>Price : ${data.price}
        <br>Number of seats : ${data.numberOfSeats}

       <hr>
       <p>Show this mail on screenDate when asked</p>
       Thank You
        `
    };

    transport.sendMail(mailOptions, (error, info) => {
        if (error) {
            return manualPaymentLogger.error('error occured while sending payment confirmation mail',{
                error:`${error}`
            });;
        }
        manualPaymentLogger.info('Message sent:', {
            messageId : `${info.messageId}`
        });
});





}

exports.singup = async (req,res,next) =>{

    try {
        const errors =  validationResult(req);
        if(!errors.isEmpty()){
            const error  =  new Error('Validation failed');
            error.statusCode  = 422;
            error.data  =  errors.array();
            throw error;
        }

        const email  =  req.body.email;
        const username  =  req.body.username;
        const password  =  req.body.password;
        const role  = req.body.role;

        let hashedPassword = await bcrypt.hash(password,12);

        const user  = new User({
            username:username,
            email:email,
            password:hashedPassword,
            role:role
        });


     let result  =  await user.save();

     manualPaymentLogger.info('user created ' , {
        username : `${ result.username}`,
        role : `${ result.role }`
     });

        res.status(201).json({message:'User created',userId : result._id});
    } catch (error) {
        manualPaymentLogger.error('error occured while creating a user ' ,{
            error : `${error}`
        });

        next(error);
    }
};

exports.login  = async ( req,res,next) =>{
    const username  =  req.body.username;
    const password  =  req.body.password;

    manualPaymentLogger.info('login request '  , {
        username : `${username}`
    })

    let loadedUser;

    try {
        let user = await  User.findOne({username:username})

        if(!user){
            const error  =  new Error('No user found');
            manualPaymentLogger.info('no user found ', {
                username : `${username}`
            })
            error.statusCode = 401;
            throw error;
        }
        loadedUser = user;
        let isEqual =  bcrypt.compare(password,user.password);

 
        if(!isEqual){
            const error  =  new Error('wrong password');
            manualPaymentLogger.info('wrong password for given user', {
                username : `${username}`
            })

            error.statusCode = 401;
            throw error;
        }

        const token  =  jwt.sign({
            email:loadedUser.email,
            userId:loadedUser._id.toString(),
            role:loadedUser.role},
        process.env.TOKEN_SECRET_KEY,{expiresIn:'10hr'}
        );

        manualPaymentLogger.info('login success ', {
            username : `${username}`
        })

        res.status(200).json({token:token,userId:loadedUser._id.toString()});
    } catch (error) {
        manualPaymentLogger.error('error occured while creating a user ' ,{
            error : `${error}`
        });
        next(error)
    }

  

    
};

 exports.getPendingPaymentStatus = async (req,res,next) =>{
   
    try {
        let user = await  User.findById(req.userId);

        if(!user){
            const error  =  new Error('User not found');
            error.statusCode = 404;
            throw error;
        }

        let pendingPaymentsOrder =await Order.find({paymentStatus:false});

        manualPaymentLogger.info('getting all orders with pending payments')

        res.status(200).json({pendingPaymentsOrder:pendingPaymentsOrder});
    } catch (error) {
        manualPaymentLogger.error('error occured while getting all orders with pending payments ' ,{
            error : `${error}`
        });
        next(error);
    }
};

 exports.updatePendingPaymentStatus = async (req,res,next) =>{


    try {
        let user  = await User.findById(req.userId);

        if(!user){
            const error  =  new Error('User not found');
            error.statusCode = 404;
            throw error;
        }

        const orderId  = req.body.orderId;
        const paymentStatus  = req.body.paymentStatus;

        let foundOrder  =  await Order.findById(orderId);

        foundOrder.paymentStatus = paymentStatus;

        let resultOrder  = await foundOrder.save();

        manualPaymentLogger.info('updating pending payment and sending  a payment confirmation mail' ,
        {
            'order'  : `${resultOrder._id}`
        });

        sendMailForPaymentSuccess(resultOrder);

        res.status(200).json({
            message: "Payment details updated successfully",
            Order :resultOrder
        });



    } catch (error) {
        manualPaymentLogger.error('error occured while updating pending payment ' ,{
            error : `${error}`
        });
        next(error)
    }

};  