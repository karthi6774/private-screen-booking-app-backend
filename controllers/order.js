const nodemailer = require('nodemailer');

const Order  =  require('../models/order');
const Theatre = require('../models/theatre');

const { validationResult} =  require('express-validator');

const { userLogger }  = require('../logger');
const { info } = require('winston');


function sendMail(data){
    var transport = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        auth: {
          user: process.env.EMAIL_USER, //generated by Mailtrap
          pass: process.env.EMAIL_PASSWORD //generated by Mailtrap
        }
      });

      var mailOptions = {
        from: process.env.EMAIL_SENDER,
       /*  to: 'user1@example.com, user2@example.com', */
       to:data.email,
        subject: 'Order Confirmed ,And Payment is still pending',
        text: 'Please ping us whatsapp for payment info. our whatsapp number +91 1234567890) ',
        html: `
        <b>Hey ${data.fullName} 
        </b><br> This is your confirmed order details
        <br> Order Id : ${data._id}
        <br>Theatre Name : ${data.theatreName}
        <br>Date : ${data.screenDate}
        <br>PaymentStatus: ${data.paymentStatus}
        <br>Slot Name : ${data.slotName}
        <br>Price : ${data.price}
        <br>Number of seats : ${data.numberOfSeats}

       <hr>
       <p>Please Make a payment as soon as possible ,otherwise slot confirmation willbe cancelled</p>
       Thank You
        `

    };

    transport.sendMail(mailOptions, (error, info) => {
        if (error) {
            return userLogger.error('error occured while sending mail',{
                error:`${error}`
            });
        }
        userLogger.info('Message sent', { messageId : `${info.messageId}` });
});




}



exports.createOrder = async (req,res,next) =>{
    



    try {

        const errors =  validationResult(req);
        if(!errors.isEmpty()){
            const error  =  new Error('Validation failed');
            error.statusCode  = 422;
            error.data  =  errors.array();
            throw error;
        }

       // console.log(req.body);
    
        const fullName = req.body.fullName;
        const email = req.body.email;
        const phoneNumber = req.body.phoneNumber;
        const theatreName = req.body.theatreName;
        let screenDate = req.body.screenDate;
   
        const screenFromTime = req.body.screenFromTime;
        const screenToTime = req.body.screenToTime;
        const price = req.body.price;
        const numberOfSeats = req.body.numberOfSeats;
        const slotName  =  req.body.slotName;
    
        const order = new Order({
            fullName:fullName,
            email:email,
            phoneNumber:phoneNumber,
            theatreName:theatreName,
            screenDate:screenDate,
            screenFromTime:screenFromTime,
            screenToTime:screenToTime,
            price:price,
            numberOfSeats:numberOfSeats,
            slotName:slotName
        });
    
        //console.log(order);

        userLogger.info('order information received '  ,{
            orderId : `${order._id}`
        });


        let resultTheatre = await Theatre.findOne({theatreName:theatreName,screenDate:screenDate});
     //  console.log(await Theatre.find({theatreName:theatreName,screenDate:screenDate}));
      //  console.log("obtained theatre " + resultTheatre);

        order.price  = resultTheatre.price;
        order.numberOfSeats = resultTheatre.seats;
         if(resultTheatre.isMorning === true && slotName === "MORNING"){
            resultTheatre.isMorning = false;
            await resultTheatre.save();
        }
       else if(resultTheatre.isAfternoon === true && slotName === "AFTERNOON"){
            resultTheatre.isAfternoon = false;
            await resultTheatre.save();
        }
       else if(resultTheatre.isEvening === true && slotName === "EVENING"){
            resultTheatre.isEvening = false;
            await resultTheatre.save();
        }
        else if(resultTheatre.isNight === true && slotName === "NIGHT"){
            resultTheatre.isNight = false;
            await resultTheatre.save();
        }
        else{
            userLogger.info('Please enter the input in correct formate')
         return res.status(400).json({
                message :"Please enter the input in correct formate"
            });
        } 
        
        let resultOrder  =  await order.save();

        userLogger.info('updated the slot information ' ,{
            orderId : `${resultOrder._id}`
        });

        sendMail(resultOrder);

        userLogger.info('mail as been sent to user provided mailId and response as been sent');

        res.status(201).json({
            message: 'Order created successfully',
            order: resultOrder,
          });
        
    } catch (err) {
        userLogger.error('an error occured while creating order ' ,{
            error : `${err}`
        });
        if (!err.statusCode) {
            err.statusCode = 500;
          }
        next(err);
    }



}


exports.availableSlots  =  async (req,res,next) => {
  // date = new Date(date);
   // let screenDate = date.toISOString().slice(0,10);
    //screenDate = date.slice(0,10);
   // console.log("converted date " + screenDate);

    // TODO : date validation (date must be greater than todays date)

    try {

        const errors =  validationResult(req);
        if(!errors.isEmpty()){
            const error  =  new Error('Validation failed');
            error.statusCode  = 422;
            error.data  =  errors.array();
            throw error;
        }
    
        //console.log(req.query);
    
        const theatreName = req.query.theatreName;
        //const screenDate  =  req.query.screenDate;
    
        let screenDate = req.query.screenDate;
    
      //  console.log("received date " + screenDate);

      userLogger.info('checking available slot for date and theatre ' , {
        theatreName : `${theatreName}`,
        screenDate : `${screenDate}`
      })
        
        const theatre = await Theatre.findOne({theatreName:theatreName,screenDate:screenDate});
        
       // console.log("found theatre " + theatre);
   /*     userLogger.info('found theatre ', {
        theatreId : `${theatre._id}`
       }) */

        if(theatre === null){
            const createdtheatre = new Theatre({
                theatreName : theatreName,
                screenDate:screenDate
            });

         let resultTheatre  =  await createdtheatre.save();

         userLogger.info('no theatre found so created a new theatre and response is sent' ,{
            theatreId : `${resultTheatre._id}`
         });

         res.status(200).json({
            message:"available slots",
            theatre:resultTheatre
         });

        }
        else{
            userLogger,info('theatre found and response has been sent ' ,{
                theatreId : `${theatre._id}`
            })
            res.status(200).json({
                message: "available slots",
                theatre: theatre
            });
        }

    } catch (err) {
        userLogger.error('an error occured while checking for available slots' , {
            error : `${err}`
        })
        if (!err.statusCode) {
            err.statusCode = 500;
          }
        next(err);
    }


}










