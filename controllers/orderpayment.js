const nodemailer = require('nodemailer');
const Razorpay = require('razorpay');
const  crypto = require("crypto");

const Order  =  require('../models/order');
const Theatre = require('../models/theatre');

const { validationResult} =  require('express-validator');

const { userLogger,razorPaymentLogger }  = require('../logger');
const { info } = require('winston');


function sendMail(data){
    var transport = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        auth: {
          user: process.env.EMAIL_USER, //generated by Mailtrap
          pass: process.env.EMAIL_PASSWORD //generated by Mailtrap
        }
      });

      var mailOptions = {
        from: process.env.EMAIL_SENDER,
       /*  to: 'user1@example.com, user2@example.com', */
       to:data.email,
        subject: 'Order Confirmed ,And Payment is still pending',
        text: 'Please ping us whatsapp for payment info. our whatsapp number +91 1234567890) ',
        html: `
        <b>Hey ${data.fullName} 
        </b><br> This is your confirmed order details
        <br> Order Id : ${data._id}
        <br>Theatre Name : ${data.theatreName}
        <br>Date : ${data.screenDate}
        <br>PaymentStatus: ${data.paymentStatus}
        <br>Slot Name : ${data.slotName}
        <br>Price : ${data.price}
        <br>Number of seats : ${data.numberOfSeats}

       <hr>
       <p>Please Make a payment as soon as possible ,otherwise slot confirmation willbe cancelled</p>
       Thank You
        `

    };

    transport.sendMail(mailOptions, (error, info) => {
        if (error) {
            return userLogger.error('error occured while sending mail',{
                error:`${error}`
            });
        }
        userLogger.info('Message sent', { messageId : `${info.messageId}` });
});




}

function sendMailForPaymentSuccess(data){
    var transport = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        auth: {
          user: process.env.EMAIL_USER, //generated by Mailtrap
          pass: process.env.EMAIL_PASSWORD //generated by Mailtrap
        }
      });

      var mailOptions = {
        from: process.env.EMAIL_SENDER,
       /*  to: 'user1@example.com, user2@example.com', */
       to:data.email,
        subject: 'Order and payment is Confirmed',
        text: 'Please ping whatsapp for payment info. our whatsapp number +91 1234567890) ',
        html: `
        <b>Hey ${data.fullName} 
        </b><br> This is your confirmed order details
        <br> Order Id : ${data._id}
        <br>Theatre Name : ${data.theatreName}
        <br>Date : ${data.screenDate}
        <br>PaymentStatus: ${data.paymentStatus}
        <br>Slot Name : ${data.slotName}
        <br>Price : ${data.price}
        <br>Number of seats : ${data.numberOfSeats}

       <hr>
       <p>Show this mail on Screen Date when asked</p>
       Thank You
        `
    };

    transport.sendMail(mailOptions, (error, info) => {
        if (error) {
            return razorPaymentLogger.error('error occured while sending payment confirmation mail',{
                error:`${error}`
            });;
        }
        razorPaymentLogger.info('Message sent:', {
            messageId : `${info.messageId}`
        });
});





}


async function updateSlotData(order){
    let resultTheatre = await Theatre.findOne({theatreName:order.theatreName,screenDate:order.screenDate});
    //  console.log(await Theatre.find({theatreName:theatreName,screenDate:screenDate}));
     //  console.log("obtained theatre " + resultTheatre);

        if(order.price !== resultTheatre.price || order.numberOfSeats !== resultTheatre.seats){
            throw new Error('input data is not correct');
        }

        if(resultTheatre.isMorning === true && order.slotName === "MORNING"){
           resultTheatre.isMorning = false;
           await resultTheatre.save();
       }
        else if(resultTheatre.isAfternoon === true && order.slotName === "AFTERNOON"){
           resultTheatre.isAfternoon = false;
           await resultTheatre.save();
       }
        else if(resultTheatre.isEvening === true && order.slotName === "EVENING"){
           resultTheatre.isEvening = false;
           await resultTheatre.save();
       }
       else if(resultTheatre.isNight === true && order.slotName === "NIGHT"){
           resultTheatre.isNight = false;
           await resultTheatre.save();
       }
       else{
           razorPaymentLogger.info('Please enter the input in correct formate')
        throw new Error("Please enter the input in correct formate");
       } 
       
       await order.save();

       razorPaymentLogger.info('updated the slot information ' ,{
           order : `${order}`
       });

       return order;
}

/* async function createOrderRazorPay(receivedOrder){
    var instance = new Razorpay({ key_id: process.env.KEY_ID, key_secret: process.env.KEY_SECRET })

    var options = {
        //TODO remove below comment while production
       // amount: order.price,  // amount in the smallest currency unit
        amount: 100,
        currency: "INR",
        receipt: receivedOrder._id
        };
    instance.orders.create(options, function(err, order) {
        console.log(order);
        if(err){
            throw new Error('error while creating order id from razorPay')
        }
        razorPaymentLogger.info('order received from razorPay ' ,{
            razorPayOrder  : `${order}`
        });

        return order;
});

}
 */


exports.createPaymentOrder = async (req,res,next) =>{
    
    try {

        const errors =  validationResult(req);
        if(!errors.isEmpty()){
            const error  =  new Error('Validation failed');
            error.statusCode  = 422;
            error.data  =  errors.array();
            throw error;
        }

       // console.log(req.body);
    
        const order = new Order({
            fullName:req.body.fullName,
            email:req.body.email,
            phoneNumber:req.body.phoneNumber,
            theatreName:req.body.theatreName,
            screenDate:req.body.screenDate,
            screenFromTime:req.body.screenFromTime,
            screenToTime:req.body.screenToTime,
            price:req.body.price,
            numberOfSeats:req.body.numberOfSeats,
            slotName:req.body.slotName


        });
    
        //console.log(order);

        userLogger.info('order information received '  ,{
            order : `${order}`
        });


        let resultOrder = await updateSlotData(order);

       // console.log("updated order "  + resultOrder)

      //  let razorPayOrder  = await createOrderRazorPay(resultOrder);

      let razorPayOrder;

      var instance = new Razorpay({ key_id: process.env.KEY_ID, key_secret: process.env.KEY_SECRET })

    var options = {
        //TODO remove below comment while production
       // amount: order.price,  // amount in the smallest currency unit
        amount: 100,
        currency: "INR",
        receipt:resultOrder._id
        };



            razorPayOrder =    await instance.orders.create(options);
/*   function(err, order) {
        console.log(order);
        if(err){
            throw new Error('error while creating order id from razorPay')
        }
        razorPaymentLogger.info('order received from razorPay ' ,{
            razorPayOrder  : `${order}`
        });

        //razorPayOrder = order;

        
        } */

        

       // console.log("created razorPay" + razorPayOrder);

        resultOrder.price  = 100;
        resultOrder.razorPayOrderId = razorPayOrder.id;

        await resultOrder.save();

        if(resultOrder){
            sendMail(resultOrder);
        }


        

        userLogger.info('mail as been sent to user provided mailId and response as been sent');

        res.status(201).json({
            message: 'Order created successfully',
            order: resultOrder,
          });
        
    } catch (err) {
        userLogger.error('an error occured while creating order ' ,{
            error : `${err}`
        });
        if (!err.statusCode) {
            err.statusCode = 500;
          }
        next(err);
    }



}

exports.verifyPaymentSignature  = async (req,res,next) =>{
    try{

        let razorpay_order_id = req.body.razorpay_order_id;
        let razorpay_payment_id = req.body.razorpay_payment_id;
        let razorpay_signature = req.body.razorpay_signature;

        let body=razorpay_order_id + "|" + razorpay_payment_id;


        let expectedSignature = crypto.createHmac('sha256', process.env.KEY_SECRET)
                                  .update(body.toString())
                                  .digest('hex');
                                  console.log("sig received " ,razorpay_signature);
                                  console.log("sig generated " ,expectedSignature);
        let response = {"signatureIsValid":"false"}
        if(expectedSignature === razorpay_signature){
            response={"signatureIsValid":"true"};

            let resultOrder  =  await Order.findOne({razorPayOrderId: razorpay_order_id});

            if(resultOrder){
                resultOrder.paymentStatus = true;
                resultOrder.razorpayPaymentId = razorpay_payment_id;
                resultOrder.razorpaySignature = razorpay_signature;

                await resultOrder.save();

                razorPaymentLogger.info('updating pending payment and sending  a payment confirmation mail' ,
                {
                    'order'  : `${resultOrder._id}`
                });
        
                sendMailForPaymentSuccess(resultOrder);
        
                res.status(200).json({
                    message: "Payment details updated successfully",
                    Order :resultOrder
                });

            }
            }
            else{
                res.statsu(400).send(response);
            }
            
    }
    catch (err) {
        userLogger.error('an error occured while verifying payment signature ' ,{
            error : `${err}`
        });
        if (!err.statusCode) {
            err.statusCode = 500;
          }
        next(err);
    }
}

exports.paymentUnsuccessfull =  async (req,res,next) =>{
   

    try{
        let order = req.body;

      //  let order  = await Order.findOne({_id : orderId});

        //TODO add the logic to remove and update the order and theatre respectively

        res.status(400).send("order cancelled");
    }
    catch (err) {
        userLogger.error('an error occured while creating order ' ,{
            error : `${err}`
        });
        if (!err.statusCode) {
            err.statusCode = 500;
          }
        next(err);
    }

}


